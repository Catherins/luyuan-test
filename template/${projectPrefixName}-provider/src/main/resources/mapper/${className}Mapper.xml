<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>  
<#assign classVOName = table.className + 'VO'>   
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>
<!-- namespace必须指向Dao接口 -->
<mapper namespace="${basepackage}.dao.I${className}DAO" >
<!-- 	<cache type="org.mybatis.caches.ehcache.EhcacheCache">
		<property name="timeToIdleSeconds" value="600"/>
	    <property name="timeToLiveSeconds" value="3600"/>
	    <property name="maxEntriesLocalHeap" value="1000"/>
	    <property name="maxEntriesLocalDisk" value="100000"/>
	    <property name="memoryStoreEvictionPolicy" value="LRU"/>
	</cache>
 -->	
    <resultMap id="RM_${className}" type="${basepackage}.model.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
		</#list>
	</resultMap>
	
	<resultMap id="RM_${classVOName}" type="${basepackage}.vo.${classVOName}" extends="RM_${className}" >
	
	</resultMap>
	
	<sql id="columns">
	    <![CDATA[
		<#list table.columns as column>${column.sqlName}<#if column_has_next>,</#if></#list>
	    ]]>
	</sql>

	<sql id="where">
		<where>
		<#list table.columns as column>
	       <if test="paramBean != null and @Ognl@isNotEmpty(paramBean.${column.columnNameFirstLower})"> AND ${column.sqlName} = <@mapperEl 'paramBean.${column.columnNameFirstLower}'/> </if>
	    </#list>
	    </where>
	</sql>
	
	<insert id="insert" keyProperty="${table.idColumn.columnNameFirstLower}">
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
         <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower})"><#if column_index != 0>,</#if>${column.sqlName}</if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower})"><#if column_index != 0>,</#if><@mapperEl column.columnNameFirstLower/></if>
        </#list>        
        )
	</insert>

    <insert id="batchInsert" keyProperty="${table.idColumn.columnNameFirstLower}">
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
            <#if column_index != 0>,</#if>${column.sqlName}
        </#list>
        ) VALUES
        <foreach collection="entities" item="entity" index="index" separator="," >
        (
        <#list table.columns as column>
            <#if column_index != 0>,</#if><@mapperEl 'entity.${column.columnNameFirstLower}'/>
        </#list>
        )
        </foreach>
    </insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	        </#list>
        WHERE 
        	<#list table.compositeIdColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next> AND </#if>
	        </#list>	        
    ]]>
	</update>

    <delete id="deleteById">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		</#list>
    ]]>
    </delete>
    
    <delete id="deleteByIds" >
        DELETE FROM ${table.sqlName} WHERE 
        <#list table.compositeIdColumns as column>
        	${column.sqlName} IN 
        	<foreach collection="ids" item="id" open="(" close=")" separator="," ><@mapperEl 'id'/> <#if column_has_next> AND </#if></foreach>
        </#list>   
    </delete>
    
    <select id="findById" resultMap="RM_${classVOName}">
		SELECT <include refid="columns"></include> 
	    <![CDATA[
		    FROM ${table.sqlName}
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		        </#list>    
	    ]]>
	</select>
	
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM ${table.sqlName} 
		<include refid="where"/>    
    </select>
    
    <select id="findPage" resultMap="RM_${classVOName}">
    	SELECT * FROM ${table.sqlName} 
		<include refid="where"/>
		<if test="orderBean != null and @Ognl@isNotEmpty(orderBean.orderBy)">
			ORDER BY <@jspEl 'orderBean.orderBy'/> <@jspEl 'orderBean.order'/>
		</if>
    </select>
    
    <sql id="findBySql">
    	SELECT * FROM ${table.sqlName} 
		<include refid="where"/>
    </sql>
    
    <select id="findBy" resultMap="RM_${classVOName}">
    	<include refid="findBySql"/>
    </select>
    
    <select id="findUniqueBy" resultMap="RM_${classVOName}">
    	<include refid="findBySql"/>
    </select>
    
    <#list table.columns as column>
    <#if column.unique && !column.pk>
    <select id="getBy${column.columnName}" resultMap="RM_${classVOName}" parameterType="${column.javaType}">
	    SELECT * 
	    <![CDATA[
	        FROM ${table.sqlName} where ${column.sqlName} = <@mapperEl column.columnNameLower/>
	    ]]>
    </select>
    </#if>
	</#list>
	
</mapper>

